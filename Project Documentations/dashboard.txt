import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useHistory } from 'react-router-dom';
import '../../styles/dashboard.css';
import styled from 'styled-components';


function Dashboard() {
  const history = useHistory();
  const [userCount, setUserCount] = useState(0);
  const [productCount, setProductCount] = useState(0);
  const [categoryCount, setCategoryCount] = useState(0);
  const [orderCount, setOrderCount] = useState(0);
  const [returnCount, setReturnCount] = useState(0);
  const [totalOrderItemsPrice, setTotalOrderItemsPrice] = useState(0);
  const [userInfo, setUserInfo] = useState({ name: '', email: '' });

  const [dailyRevenueData, setDailyRevenueData] = useState([]);


  useEffect(() => {
    document.title = 'Dashboard';

    fetchData();
    fetchDailyRevenueData(); // Fetch your daily revenue data
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get(`/api/admin/dashboard`);
      const {
        status,
        userCount,
        productCount,
        categoryCount,
        orderCount,
        returnCount,
        userInfo,
        totalOrderItemsPrice,
      } = response.data;

      if (status === 200) {
        setUserCount(userCount);
        setProductCount(productCount);
        setCategoryCount(categoryCount);
        setOrderCount(orderCount);
        setReturnCount(returnCount);
        setTotalOrderItemsPrice(totalOrderItemsPrice);
        setUserInfo(userInfo);
      } else {
        console.error('API returned an error:', response.data);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const navigateToUsersPage = () => {
    history.push('/admin/users');
  };

  const navigateToProductsPage = () => {
    history.push('/admin/view-product');
  };

  const navigateToCategoriesPage = () => {
    history.push('/admin/view-category');
  };

  const navigateToOrdersPage = () => {
    history.push('/admin/orders');
  };

  const navigateToReturnsPage = () => {
    history.push('/admin/returns');
  };

  const fetchDailyRevenueData = async () => {
    try {
      const response = await axios.get(`/api/admin/daily-revenue`);
      const { status, dailyRevenueData } = response.data;

      if (status === 200) {
        setDailyRevenueData(dailyRevenueData);
      } else {
        console.error('API returned an error:', response.data);
      }
    } catch (error) {
      console.error('Error fetching daily revenue data:', error);
    }
  };


  const ChartContainer  = styled.div`
  display: flex;
  justify-content: space-around;
  height: 300px; /* Set a fixed height based on your design */
`;

const BarChartContainer = styled.div`
  text-align: center;
  transform: scaleY(-1); /* Inverts only this component */

`;

const Chart = styled.div`
  margin-top: 10px;
  width: 56px;
  &:hover {
    opacity: 0.8;
  }
  @media (max-width: 420px) {
    width: 34px;
  }
`;

const MakeBar = styled.div`
  height: ${(props) => props.height}%;
  background-image: linear-gradient(
    to bottom,
    ${(props) => props.colors[0]},
    ${(props) => props.colors[1]}
  );
  ${Chart};
`;




const Number = styled.span`
  font-size: 1.5rem;
  text-align: center;
  color: ${(props) => props.color};
`;

  // Render a simple inline CSS bar chart
  const renderBarChart = (data) => {
    if (!Array.isArray(data) || data.length === 0) {
      return <p>No data available for the bar chart.</p>;
    }
  
    const maxRevenue = Math.max(...data.map((item) => parseInt(item.revenue, 10)));
  
    return (
      <ChartContainer>
  {data.map((item, index) => (
    <BarChartContainer key={index}>
      <Number color={item.revenue > 150 ? 'green' : 'red'}>
        {item.revenue}
      </Number>
      <MakeBar
        height={(item.revenue / maxRevenue) * 100}
        colors={item.revenue > 150 ? ['lightgreen', 'green'] : ['pink', 'red']}
      />
    </BarChartContainer>
  ))}
</ChartContainer>
    );
  };
  
  
  
  
  

  
  
  
  

  
  
  
  
  
  
  
  
   
  
  


  return (
    <div className="dashboard-container">
      <div className="title-container">
      <h1 className="dashboard-title">Dashboard</h1>
        <div className="user-info">
          <div className="user-info-content">
          <div className="user-info-text">
          <p className="user-name">Welcome to Dashboard {userInfo.name} (Admin) !!</p>
          <p className="user-email">Registered with Email: {userInfo.email}</p>
        </div>
        <p className="total-revenue">Our total Revenue: {totalOrderItemsPrice}</p>
          </div>
        </div>

        </div>
      <div className="dashboard-stats">
        <div className="dashboard-stat">
            <button onClick={navigateToUsersPage} className="dashboard-link user-button">
            Total Users: {userCount}
            </button>
        </div>
        <div className="dashboard-stat">
            <button onClick={navigateToProductsPage} className="dashboard-link product-button">
            Total Products: {productCount}
            </button>
        </div>
        <div className="dashboard-stat">
            <button onClick={navigateToCategoriesPage} className="dashboard-link category-button">
            Total Categories: {categoryCount}
            </button>
        </div>
        <div className="dashboard-stat">
            <button onClick={navigateToOrdersPage} className="dashboard-link order-button">
            Total Orders: {orderCount}
            </button>
        </div>
        <div className="dashboard-stat">
            <button onClick={navigateToReturnsPage} className="dashboard-link return-button">
            Total Returns: {returnCount}
            </button>
        </div>

        <div>
          <h1 className='mb-4'>Daily Revenue Chart</h1>
          {renderBarChart(dailyRevenueData)}
        </div>
    
      </div>
    </div>
  );
}

export default Dashboard;
